OWASP Top 10 Cloud Security Risks

| Risk Code     | Title                                    | Description                                                                                   |
| ------------- | ---------------------------------------- | --------------------------------------------------------------------------------------------- |
| R1            | Accountability and Data Ownership        | Cloud use may result in a loss of control over data. Difficult to ensure data recoverability. |
| R2            | User Identity Federation                 | Multiple cloud platforms lead to multiple user identities. Hard to manage user lifecycle.     |
| R3            | Regulatory Compliance                    | Following laws across countries is difficult. Data security varies by location.               |
| R4            | Business Continuity and Resiliency       | Poor handling by cloud providers may lead to service disruptions or data loss.                |
| R5            | User Privacy and Secondary Usage of Data | Social platforms may misuse user data. Sharing settings can leak private info.                |
| R6            | Service and Data Integration             | Data in transit to the cloud can be intercepted if not secured properly.                      |
| R7            | Multi-Tenancy and Physical Security      | Shared cloud resources may lack proper isolation, leading to cross-tenant interference.       |
| R8            | Incident Analysis and Forensic Support   | Investigating cloud incidents is hard due to distributed logs and data across countries.      |
| R9            | Infrastructure Security                  | Misconfigured systems expose networks to scanning, default settings, and vulnerabilities.     |
| R10           | Non-Production Environment Exposure      | Development/test environments can be insecure and prone to unauthorized access.               |

OWASP Top 10 Serverless Security Risks

| Risk                                             | How Attack Happens                                                                   | Weakness in the System                                   | Possible Damage                                                   |
| ------------------------------------------------ | ------------------------------------------------------------------------------------ | -------------------------------------------------------- | ----------------------------------------------------------------- |
| A1 - Injection                                   | Attackers send bad input from emails, databases, or cloud events to trick functions. | Weak input checks let attackers insert harmful code.     | Can delete or corrupt data if the function has high access.       |
| A2 - Broken Authentication                       | Hackers send fake emails or use open APIs to run functions.                          | Poor control over who can run the functions.             | Leaks data, breaks app logic, and changes how the app works.      |
| A3 - Sensitive Data Exposure                     | Data is stolen during transfer or from storage like S3 or DynamoDB.                  | Storing data in plain text or with weak encryption.      | Leaks personal data, health info, passwords, credit card numbers. |
| A4 - XML External Entities (XXE)                 | Function uses XML in a wrong way, allowing attackers to read hidden files.           | Using unsafe XML tools.                                  | Can leak function code or other private info.                     |
| A5 - Broken Access Control                       | Hackers use over-permissioned functions to access things they shouldn't.             | Giving functions more access than they need.             | Can steal or delete files from cloud storage or database.         |
| A6 - Security Misconfiguration                   | Poor settings like long timeouts or low limits let attackers overload systems.       | Functions are misconfigured or not updated.              | May lead to data leaks, slowdowns, or unauthorized access.        |
| A7 - Cross-Site Scripting (XSS)                  | Bad input from logs or emails runs in the app as code.                               | App doesn't clean inputs properly.                       | Lets hackers act like users and steal sensitive data.             |
| A8 - Insecure Deserialization                    | Attackers use tricky data formats to run bad code.                                   | Functions accept untrusted data in formats like JSON.    | May let hackers run their own code or steal data.                 |
| A9 - Using Components with Known Vulnerabilities | Functions use old or unsafe libraries that have known flaws.                         | Not checking for updates or safe versions of components. | Can be exploited easily if known bugs are not fixed.              |
| A10 - Insufficient Logging and Monitoring        | Attacks go unnoticed because there’s no proper logging.                              | Weak tracking of function actions.                       | Makes it hard to detect or understand attacks quickly.            |

Cloud Computing Threats

1] Data Breach or Loss
What it means: Someone may access, steal, or delete your data if the system isn’t secure.
Why it happens: Weak security, stolen passwords, or poor data handling.
Fix it with:
 Encrypt your data (while stored and in use).
 Use strong passwords and multi-factor login.
 Back up your data regularly.
 Monitor and limit access to sensitive files.
 Use tools that prevent unauthorized data sharing (like CASBs or DLP).
2] Abuse of Cloud Services
What it means: Hackers use cloud accounts for illegal activities (like sending spam or hacking).
Why it happens: Anyone can easily sign up for cloud services without checks.
Fix it with:
 Use strong sign-up and identity verification.
 Monitor user traffic for suspicious behavior.
 Block bad IP addresses.
 Work with secure cloud providers.
3] Insecure APIs and Interfaces
What it means: Interfaces (like buttons, dashboards, or coding tools) that control cloud systems might be weak and unsafe.
Why it happens: Bad coding, reused passwords, and no encryption.
Fix it with:
 Secure logins and access control.
 Encrypt all data going in and out.
 Never reuse API keys or tokens.
 Use tools to check if your APIs are safe.
4] Insufficient Due Diligence
What it means: Not fully understanding what the cloud provider does or doesn’t protect.
Why it happens: Lack of planning or asking the wrong questions.
Fix it with:
 Learn everything about your provider’s security setup.
 Make sure employees know cloud security basics.
 Check incident handling, disaster recovery, and who is responsible for what.
5] Shared Technology Risks
What it means: Cloud providers use shared hardware. If one customer’s app is weak, others may get affected.
Why it happens: Poor isolation between customers.
Fix it with:
 Regular security updates and patches.
 Scan and monitor systems for threats.
 Use firewalls to separate customer data.
6] Unknown Risk Profile
What it means: You don’t know what’s going on inside the cloud system (like who patched what).
Why it happens: Cloud users don’t control the full system.
Fix it with:
 Ask for logs and reports from your provider.
 Request transparency on security practices.
7] Unsynchronized Clocks
What it means: Different servers having different times can mess up logs, backups, and transactions.
Fix it with:
 Use tools like NTP (Network Time Protocol) to sync time.
 Keep time servers inside your secure network.
8] Poor Infrastructure Planning
What it means: The cloud provider can’t handle sudden increases in user demand.
Fix it with:
 Plan based on expected use.
 Ensure your provider has backup plans and enough resources.
9] Conflicts with Security Settings
What it means: Your company’s security settings may not work with your cloud provider’s system.
Fix it with:
 Clearly define roles and security boundaries.
 Test and review both your and the provider’s security setups.
10] Loss of Logs
What it means: Losing logs (records of activity) makes it hard to investigate problems or attacks.
Fix it with:
 Secure and backup log files.
 Limit who can access or delete logs.
 Set up centralized log storage.
11] Malicious Insiders
What it means: Employees or contractors who misuse their access for personal gain.
Fix it with:
 Run background checks and set clear rules.
 Monitor insider activity.
 Define clear incident response plans.
12] Illegal Access
What it means: Hackers break into cloud accounts due to weak passwords or access settings.
Fix it with:
 Strong password policies and two-factor authentication.
 Review the cloud provider’s security regularly.
13] Reputation Damage from Other Users (Co-Tenants)
What it means: If a hacker uses the same cloud provider (in a shared space), your service might be blamed too.
Fix it with:
 Choose reliable cloud providers.
 Ask how they isolate and protect tenant data.
14] Privilege Escalation
What it means: Someone gains more access than they’re supposed to (like admin rights).
Fix it with:
 Regularly audit user roles and permissions.
 Keep software up to date.
 Monitor suspicious behavior.
15] Natural Disasters
What it means: Earthquakes, floods, etc. can take down cloud services.
Fix it with:
 Store data in multiple locations.
 Prepare a disaster recovery plan.
16] Hardware Failures
What it means: Failure in disks, servers, routers causes data loss or app crashes.
Fix it with:
 Have backup hardware ready.
 Backup data regularly and automatically.
 Build systems that keep running even if one part fails.
17] Supply Chain Failures
What it means: If your cloud provider’s partners fail, your service could suffer.
Fix it with:
 Monitor all suppliers.
 Use blockchain or digital signatures for safe transactions.
 Have backup partners ready.
18] Network Traffic Modification
What it means: Hackers change or listen to your network traffic to steal data.
Fix it with:
 Analyze and monitor all network traffic regularly.
19] Isolation Failures
What it means: One customer’s app may affect others due to weak separation.
Fix it with:
 Keep user data and network traffic separate with strong isolation settings.
20] Cloud Provider Acquisition
What it means: If your cloud provider is bought by another company, your data or services may be at risk.
Fix it with:
 Work with trusted providers.
 Review agreements and service levels carefully.
21] Management Interface Compromise
What it means: Hackers get into the admin panel of cloud systems.
Fix it with:
 Use secure web protocols.
 Isolate admin interfaces from public access.
 Patch systems regularly.
22] Network Mismanagement
What it means: Bad network settings lead to slow or unsafe connections.
Fix it with:
 Monitor networks closely.
 Use VPNs and secure design.
 Keep systems updated.
23] Authentication Attacks
What it means: Weak login systems can be bypassed.
Fix it with:
 Use strong, unique passwords and two-factor authentication.
 Limit user access and monitor logins.
24] VM-Level Attacks
What it means: Attacks on virtual machines (VMs) through weak hypervisors.
Fix it with:
 Use secure and updated hypervisors.
 Employ intrusion detection systems.
 Avoid sharing hardware between users.
25] Vendor Lock-in
What it means: You can’t easily switch to another cloud provider.
Fix it with:
 Use standard formats and APIs.
 Plan for migration from day one.
 Use multiple cloud providers if possible.

☁️ More Cloud Computing Threats ☁️
1] Licensing Risks
What it means: You may end up paying more than necessary for software licenses in the cloud.
Why it happens: Hidden fees, duplicate licenses, or unclear terms.
Fix it with:
 Review your cloud provider’s licensing model.
 Use one platform to manage software licenses and costs.
 Remove unused cloud resources.
2] Loss of Governance
What it means: When using cloud services, you give up some control, which might hurt your security and performance.
Fix it with:
 Make clear agreements with the cloud provider (SLAs).
 Set strong rules for managing data and performance.
 Use the same governance standards for cloud and in-house systems.
 Automate compliance checks.
3] Loss of Encryption Keys
What it means: Losing the key means losing access to your data or letting attackers in.
Fix it with:
 Never store keys near the encrypted data.
 Use strong encryption methods like AES and RSA.
 Use role-based access to key stores.
 Backup keys securely.
 Don’t reuse encryption keys.
 Use Hardware Security Modules (HSMs).
4] Jurisdiction Risks
What it means: Your data may be stored in countries with weak legal protections.
Fix it with:
 Learn where your data is stored and understand the local laws and risks.
5] Malicious Probes or Scans
What it means: Hackers try to gather information to plan an attack.
Fix it with:
 Use firewalls and intrusion detection systems.
 Separate admin (hypervisor) traffic from user traffic using VLANs.
 Don’t allow ping or traceroute replies from sensitive areas.
6] Theft of Computer Equipment
What it means: Physical theft of servers, disks, or other equipment leads to data loss.
Fix it with:
 Use security guards, CCTV, alarms, and smart ID access.
 Lock server rooms.
 Use biometric authentication.
 Store backups in safe, off-site places.
 Use rack-mounted servers for extra security.
7] Cloud Service Termination or Failure**
What it means: The cloud provider shuts down, taking your data with it.
Fix it with:
 Make sure the provider has a clear data return and deletion process.
 Add legal protection in service agreements.
 Ensure secure deletion of data after termination.
8] Subpoena and E-Discovery
What it means: Your data can be legally accessed or seized by government or third parties.
Fix it with:
 Choose a trusted cloud provider.
 Review all legal and privacy terms in the agreement.
 Create an eDiscovery plan.
 Plan an exit strategy.
9. Improper Data Disposal
What it means: Data isn't truly deleted from servers and may be recovered.
Fix it with:
 Encrypt data so it’s useless even if not deleted.
 Use VPNs for safe deletion processes.
 Set time limits for data storage and apply secure deletion.
 Document and standardize all deletion steps.
10] Loss or Tampering of Backup Data
What it means: Attackers may delete or alter your backup data.
Fix it with:
 Use reliable data recovery tools.
 Don’t rely on one backup—use the 3-2-1 rule:
 3. copies of data
 2. different storage types
 1. copy off-site
11] Compliance Risks
What it means: Your cloud provider doesn’t meet legal or industry security standards.
Fix it with:
 Ensure your data stays protected.
 Review your provider’s audit processes.
12] Economic Denial of Sustainability (EDoS)
What it means: An attacker racks up your cloud costs using fake traffic or tasks.
Fix it with:
 Use services that detect and stop such attacks (scrubber services).
 Use puzzle-based protections to slow attackers.
13] Lack of Security Architecture
What it means: Moving to the cloud without a strong security plan opens the door to attacks.
Fix it with:
 Build a security plan before moving to the cloud.
 Regularly update it.
 Perform security assessments.
14] Account Hijacking
What it means: If hackers get into your cloud account, they can steal or damage everything.
Fix it with:
 Give users only what access they need.
 Use identity and access management (IAM).
 Use multi-factor authentication.
 Remove old or unused accounts.
 Use password managers.
 Encrypt sensitive information.

Common Container Vulnerabilities in Cloud Computing

| #     | Vulnerability                          | What it Means                                                                                             |
| ----- | ---------------------------------------| --------------------------------------------------------------------------------------------------------- |
| 1     | Impetuous Image Creation               | When images are made carelessly, without security checks, they can contain serious flaws or risks.        |
| 2     | Unreliable Third-Party Resources       | Using tools or code from unknown sources can introduce malware or vulnerabilities into your container.    |
| 3     | Unauthorized Access                    | Hackers may break into container systems, steal data, or gain extra access rights (privilege escalation). |
| 4     | Insecure Runtime Configurations        | Wrong settings or exposing sensitive directories (like `/root`) during container setup causes risk.       |
| 5     | Data Exposure in Docker Files          | Sensitive info (like passwords or secret keys) stored in Dockerfiles can be leaked to attackers.          |
| 6     | Embedded Malware                       | Malware might be hidden inside a container image or downloaded after the container is running.            |
| 7     | Non-Updated Images                     | Using old container images leaves security holes because bugs are not patched.                            |
| 8     | Hijacked Repository/Infected Resources | If someone breaks into your image repository, they can change or delete images and add harmful code.      |
| 9     | Hijacked Image Registry                | Attackers can access the image registry (like Docker Hub) due to misconfigurations and poison images.     |
| 10    | Exposed Services via Open Ports        | If containers have open ports not protected properly, attackers can access or scan them for weaknesses.   |
| 11    | Exploited Applications                 | Apps inside the container can be hacked using known attacks like SQL injection (SQLi) or XSS.             |
| 12    | Mixing Sensitive & Public Workloads    | Hosting sensitive and public containers on the same system can be dangerous if one is compromised.        |

 Common Kubernetes Vulnerabilities

| #     | Vulnerability                           | What It Means                                                                                            |
| ----- | --------------------------------------- | -------------------------------------------------------------------------------------------------------- |
| 1     | No Certificate Revocation               | If a certificate is compromised, there's no easy way to cancel it. The whole chain needs to be replaced. |
| 2     | Unauthenticated HTTPS Connections       | Some internal components don’t properly verify identity, allowing attackers to connect and steal data.   |
| 3     | Bearer Tokens in Logs                   | Important tokens are stored in system logs. If attackers see the logs, they can pretend to be users.     |
| 4     | Sensitive Data in Environment Variables | Data like passwords in environment settings can be leaked through logs or error messages.                |
| 5     | Secrets Not Encrypted                   | Secrets like passwords and keys are stored unencrypted by default. Hackers can steal them.               |
| 6     | Timing Attack on Password Comparison    | Passwords are compared in a way that can leak timing info, allowing attackers to guess the password.     |
| 7     | Hardcoded Credential Paths              | If credentials and certificates are stored in predictable places, attackers can replace them.            |
| 8     | Log Rotation Issues                     | When logs rotate and the system restarts, old logs might be erased—helping attackers hide evidence.      |
| 9     | No Back-off in Scheduling               | Kubernetes keeps trying to schedule failed pods in a loop, wasting resources and potentially crashing.   |
| 10    | No Non-repudiation (No Action Logs)     | User actions aren’t always recorded. So, if someone does something bad, you can’t prove who did it.      |

What is Service Hijacking using Social Engineering?
Service hijacking means someone illegally takes control of your cloud account (like your login to Google Cloud, AWS, or Microsoft Azure).
To do this, attackers often use social engineering — which is tricking people instead of hacking computers.

How does Social Engineering Work in the Cloud?
Attackers use clever tricks to fool people into giving away their passwords or other private information. Here are some common tricks:
 Phishing: Sending fake emails that look real. These emails ask users to "log in" to a fake cloud login page.
 Pharming: Redirecting users to fake websites, even if they typed the correct address.
 Pretending to be Support: Calling or emailing IT staff and pretending to be someone trustworthy to get login credentials.
 Password Guessing or Keyloggers: Trying common passwords or using malware to capture typed passwords.
 Example of the Attack:
	An attacker creates a fake cloud login page (like AWS or Google Cloud).
	They send the link to the victim through email or message.
	The victim opens the link, sees the login page, and enters their username and password.
	That info goes straight to the attacker.
	The page then redirects the victim to the real site, so they don't notice anything went wrong.
	Meanwhile, the attacker logs in using the stolen credentials and performs malicious actions like stealing files, deleting data, or spying on activities.
    ⚠️ What Can Go Wrong?
	Stolen customer and credit card data 
	Loss of personal information 
	Business plans or strategies getting leaked 
	Identity theft or impersonation
	Disruption to cloud services

How to Protect Against This?
|  Protection Method                         | What it Means                                                                              |
| ------------------------------------------ | ------------------------------------------------------------------------------------------ |
| Don’t share login details                  | Everyone should have their own login. No sharing of usernames or passwords.                |
| Use two-factor authentication (2FA/MFA)    | Even if someone steals your password, they still need a second code (like an OTP).         |
| Train employees on cyber awareness         | Teach your staff how to spot fake emails, suspicious links, and social engineering tricks. |
| Follow your security rules strictly        | Always stick to your company’s security policies—no shortcuts.                             |
| Encrypt sensitive data                     | Protect your data by turning it into unreadable code during transmission.                  |
| Apply least privilege                      | Give users only the access they need. No more, no less.                                    |
| Split admin roles between CSP & your team  | Don’t give full control to just one person or one group—divide duties to stay safer.       |

☁️ Service Hijacking Using Network Sniffing
What Is It? :=>Network sniffing is like spying on internet traffic. When your data moves through the internet (like login details), someone with bad intentions can capture it using tools like Wireshark.
This becomes a problem if your data is not encrypted.
How the Attack Works
1. A user types in their username and password to log in to a cloud service.
2. The data travels through the network.
3. An attacker nearby uses a packet sniffer tool to capture this traffic.
4. If the data is not encrypted, the attacker can read it directly.
5. The attacker then uses this info to log in and misuse the user’s cloud services.
How to Prevent Network Sniffing Attacks
|  Countermeasure                      | What It Means                                                                              |
| ------------------------------------ | ------------------------------------------------------------------------------------------ |
| Encrypt all data during transmission | Always use SSL/TLS to ensure that your data is not visible to anyone watching the network. |
| Encrypt config files too             | Don’t store sensitive info like passwords in plain text in configuration files.            |
| Detect promiscuous mode NICs         | Check if any network devices are spying on all the network traffic (which is abnormal).    |
| Always use HTTPS (not HTTP)          | HTTPS ensures your passwords and data are encrypted when sent through the web.             |

Side-Channel Attacks / Cross-Guest VM Breaches
What Is It? :=> A side-channel attack is a clever trick where a hacker places their virtual machine (VM) next to yours on the same physical cloud server.
Since both VMs share hardware (like memory or CPU), the attacker "listen” to the system's behavior to steal secrets like passwords or cryptographic keys.
How the Attack Happens (Example)
1. The attacker creates a malicious VM and tries to place it on the same server as your VM (like being in the same apartment building).
2. Using the shared hardware, they monitor the processor cache, memory timing, etc.
3. They use this info to extract confidential data, such as encryption keys.
4. The attacker then uses the stolen credentials to impersonate you and access your cloud data.
How to Prevent Side-Channel Attacks
|  Countermeasure                              | What It Means                                                                                 |
| -------------------------------------------- | --------------------------------------------------------------------------------------------- |
| Use virtual firewalls                        | Block attackers from placing malicious VMs near your cloud server.                            |
| Use strong encryption algorithms             | Encrypt your data using RSA, AES, or 3DES so it's hard to read even if someone intercepts it. |
| Lock down OS and apps                        | Secure the system so attackers can’t exploit weak points.                                     |
| Monitor memory/cache access behavior         | Watch for suspicious repeated access to shared memory or hypervisor areas.                    |
| Code apps for safe access to shared hardware | Design your software in a way that avoids revealing patterns an attacker could exploit.       |

1. Wrapping Attack
A Wrapping Attack happens during secure communication (using SOAP over TLS) between your system and a cloud service. The attacker copies part of your message (like your identity and signature) and sends it again, pretending to be you.
How It Works:
1]You send a request through your browser to the cloud service.
2]The system creates a SOAP message, signs it, and sends it.
3]The attacker intercepts this message, duplicates the signed part (like a rubber stamp), and sends a fake version to the server.
4]The server checks the signature (which seems valid) and accepts the message.
5]The attacker can now run harmful code in your name.
Countermeasures :
|  Countermeasure                          |  What It Means                                                              |
| ---------------------------------------- | ---------------------------------------------------------------------------- |
| Use XML schema validation                | Verify that the SOAP message is structured correctly.                        |
| Use authenticated encryption             | Encrypt and verify SOAP data securely.                                       |
| Improve signature and logic coordination | Ensure that the signature check and the actual system logic match.           |
| Use WS-SecurityPolicy “SignedParts”      | Sign all important parts of the SOAP message, especially headers and body.   |
| Use CryptoCoverageChecker                | Make sure only valid and expected parts of the message are encrypted/signed. |

2. Man-in-the-Cloud (MITC) Attack
MITC attacks are like MITM (Man-in-the-Middle) but done through cloud file sync tools (e.g., Google Drive, Dropbox). Attackers steal your synchronization token, giving them secret access to your cloud files without needing a password.
How It Works:
1]The attacker sends a malicious file or link that secretly installs a tool on your computer.
2]This tool plants the attacker’s sync token.
3]Now the attacker has access to your files, just like you do.
4]After stealing what they need, they put back your real token to avoid detection.
Countermeasures :
|  Countermeasure                         |  What It Means                                            |
| --------------------------------------- | --------------------------------------------------------- |
| Use email security gateways             | Stop phishing/malware emails before they reach users.     |
| Enforce token expiration policies       | Tokens should automatically expire after a set time.      |
| Use antivirus tools                     | Catch and remove malware early.                           |
| Use CASB (Cloud Access Security Broker) | Monitor cloud app traffic for suspicious activity.        |
| Monitor employee behavior               | Watch for unusual file access patterns.                   |
| Encrypt data in the cloud               | Make files unreadable if stolen.                          |
| Enable multi-factor authentication      | Make it harder for attackers to log in with just a token. |

3. Cloud Hopper Attack
Cloud Hopper attacks target Managed Service Providers (MSPs) and their clients. Hackers break into the MSP, then spread to customers and steal their sensitive data. These are usually very advanced attacks backed by expert hacking groups.
How It Works:
1]Attacker sends a phishing email with malware to an MSP employee.
2]Malware is installed and remote access is gained.
3]From the MSP, the attacker moves to customer systems.
4]Sensitive data is copied and stolen, and further attacks may be launched from within.
Countermeasures:
| Countermeasure                                   |  What It Means                                                                         |
| ------------------------------------------------ | -------------------------------------------------------------------------------------- |
| Use multi-factor authentication                  | Prevent account takeovers.                                                             |
| Have clear coordination between CSPs and clients | Work together when something suspicious happens.                                       |
| Make sure everyone follows cloud policies        | Enforce security rules and responsibilities.                                           |
| Apply data classification                        | Mark and protect sensitive data to reduce risks.                                       |
| Use jump servers                                 | Add a secure system in the middle to isolate and control access to cloud environments. |

4. Cloud Cryptojacking (Stealing Your Cloud Resources for Mining Cryptocurrency) :- Cryptojacking is when an attacker secretly uses your cloud system (or your browser) to mine cryptocurrency — without your permission. It slows down your system and increases your cloud bills.
How It Happens:
1]Attacker finds a weakness in your cloud setup (like poor security).
2]They add a malicious crypto-mining script to your website or cloud service.
3]When a user (victim) visits that website, the script runs in their browser, using their device's CPU to mine cryptocurrency.
4]The attacker gets the profit, while you or your users bear the cost.
Effects:
 Slower websites and devices
 High electricity and cloud usage bills
 Security risks and unhappy customers

5. Cloudborne Attack (Hidden Backdoor in Cloud Server Firmware) :- Cloudborne is a dangerous firmware-based attack. The attacker hides a malicious backdoo in the hardware of a cloud server (in its firmware). This backdoor can remain even when the server is reassigned to a new customer.
> Firmware is the low-level software that controls the hardware of a server — it loads before the operating system.
How It Happens:
1]Attackers exploit a firmware flaw in bare-metal (physical) cloud servers.
2]They install a backdoor in the BMC (Baseboard Management Controller) — a part that helps manage servers remotely.
3]Even after reformatting the system, the backdoor remains if firmware isn’t fully reset.
4]The attacker uses the backdoor to:
   Spy on new users
   Steal data
   Disable servers
   Launch ransomware attacks
Why It’s Dangerous:
 Firmware is rarely checked or updated by users
 The attacker gets full control of the system, without detection
 It can affect new customers who use the same hardware
Simple Countermeasures:
|  Security Step                               |  What It Does                                          |
| -------------------------------------------- | ------------------------------------------------------ |
| Keep firmware updated                        | Prevents known firmware bugs from being used           |
| Sanitize firmware before reassigning servers | Wipes out backdoors before a new user gets it          |
| Scan for backdoors before deployment         | Ensures the server is clean                            |
| Regularly check firmware for vulnerabilities | Helps stay ahead of new attack techniques              |
| CSPs must inspect hardware for tampering     | Physically check servers before assigning to customers |

6. IMDS Misuse (Cloud Metadata Service Risks)
IMDS (Instance Metadata Service) is a feature in cloud VMs to assign roles/access. If misused, it can expose secrets.
Extra Countermeasures:
 Use IMDSv2 (more secure)
 Disable IMDS if not needed
 Assign least privilege roles
 Restrict access to IMDS

7. Cache Poisoned Denial of Service (CPDoS) / CDN Cache Poisoning
An attacker tricks a CDN (Content Delivery Network) into caching an error or fake page instead of the real one. Now, when users try to access the site, they all get the fake/error page.
How It Happens:
1]Attacker sends a malformed request to the origin server.
2]CDN doesn’t have a copy, so it asks the main server.
3]Main server replies with an error page.
4]CDN caches that error page.
5]Now all users get the error page → DoS!
Countermeasures:
 Don’t cache error pages in CDN.
 Use a Web Application Firewall (WAF).
 Monitor and remove bad/error content from the cache.

8. Cloud Snooper Attack
An attacker uses rootkits and C2 commands hidden inside legitimate-looking network traffic (on common ports like 80 and 443) to control the server remotely.
How It Happens:
1]Attacker sends hidden commands in normal-looking traffic.
2]Rootkit on server intercepts this traffic.
3]Commands are redirected to a hidden backdoor (Trojan).
4]Trojan performs the attack and sends data back, also disguised.
Countermeasures:
 Analyze network traffic regularly.
 Patch web servers and systems.
 Use layered defense (defense in depth).

9. Golden SAML Attack
An attacker fakes authentication by creating forged SAML tokens using stolen certificate keys from the identity provider (e.g., ADFS).
How It Happens:
1]Attacker gains admin access to ADFS.
2]Steals token signing certificate.
3]Crafts a fake SAML token.
4]Service provider trusts the token and grants access.
Countermeasures:
 Use multi-factor authentication.
 Monitor and limit user privileges.
 Change certificates regularly.
 Watch for suspicious login patterns.

10. Session Hijacking (XSS)
Attackers steal cookies or session IDs through injected scripts and use them to pretend to be a legitimate user.
How It Happens:
1]Attacker injects malicious script into a webpage.
2]User visits the page → script runs → steals cookies.
3]Attacker uses cookie to hijack session.
Countermeasures:
 Use SSL, firewalls, and code scanning tools.
 Keep scripts secure and sanitize input.

11. Session Riding (CSRF)
Also called Cross-Site Request Forgery (CSRF). An attacker tricks a logged-in user into performing actions like changing settings or transferring money — without knowing.
How It Happens:
1]User logs in to a secure site.
2]Attacker sends them a malicious link or email.
3]When clicked, the link executes unwanted actions as if the user did it.
Countermeasures:
 Don’t save login details in browsers.
 Check the referrer header.
 Use anti-CSRF tokens.

12. DNS Attacks
The attacker targets the DNS system to redirect users to fake websites and steal their login info.
Countermeasures:
 Use DNSSEC (DNS Security Extensions).
 Monitor for suspicious DNS traffic.
 Don’t click unknown or suspicious links.







